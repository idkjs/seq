// Generated by Melange
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Scanf = require("bs-platform/lib/js/scanf.js");
var Stdlib = require("bs-platform/lib/js/stdlib.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_sys = require("bs-platform/lib/js/caml_sys.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

var version = Curry._1(Scanf.sscanf(Sys.ocaml_version, /* Format */{
          _0: {
            TAG: /* Int */4,
            _0: /* Int_d */0,
            _1: /* No_padding */0,
            _2: /* No_precision */0,
            _3: {
              TAG: /* Char_literal */12,
              _0: /* '.' */46,
              _1: {
                TAG: /* Int */4,
                _0: /* Int_d */0,
                _1: /* No_padding */0,
                _2: /* No_precision */0,
                _3: /* End_of_format */0
              }
            }
          },
          _1: "%d.%d"
        }), (function (major, minor) {
        return [
                major,
                minor
              ];
      }));

var basename = Caml_obj.caml_lessthan(version, [
      4,
      7
    ]) ? "seq_redef" : "seq_alias";

var match = Caml_array.get(Caml_sys.caml_sys_argv(0), 1);

var file;

switch (match) {
  case "impl" :
      file = basename + ".ml";
      break;
  case "intf" :
      file = basename + ".mli";
      break;
  default:
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "select_version.ml",
            10,
            11
          ],
          Error: new Error()
        };
}

var ic = Stdlib.open_in_bin(file);

var length = Stdlib.in_channel_length(ic);

var content = Stdlib.really_input_string(ic, length);

Stdlib.close_in(ic);

Stdlib.print_string(content);

/* version Not a pure module */
